#!/usr/bin/env python3
"""
ROSE ASHCOMBE - ASSISTANT UPDATE WITH MORNING BRIEFING
Updates existing Rose assistant to include multi-calendar and morning briefing support
"""

from openai import OpenAI
import os
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Your existing Rose Assistant ID - UPDATE THIS!
EXISTING_ASSISTANT_ID = os.getenv("ROSE_ASSISTANT_ID") or "asst_your_rose_id_here"

# Rose's ENHANCED functions with morning briefing support
rose_enhanced_functions = [
    # Core Calendar Functions (enhanced for multi-calendar)
    {
        "type": "function",
        "function": {
            "name": "get_today_schedule",
            "description": "Get today's schedule from both BG Calendar and BG Tasks calendars for executive planning.",
            "parameters": {"type": "object", "properties": {}, "required": []}
        }
    },
    {
        "type": "function",
        "function": {
            "name": "get_upcoming_events",
            "description": "Get upcoming events from both calendars for strategic planning.",
            "parameters": {
                "type": "object",
                "properties": {
                    "days": {"type": "integer", "description": "Days ahead (1-14)", "default": 7}
                },
                "required": []
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "get_morning_briefing",
            "description": "Generate a comprehensive morning briefing with today's schedule from both calendars, tomorrow's preview, and executive insights.",
            "parameters": {"type": "object", "properties": {}, "required": []}
        }
    },
    {
        "type": "function",
        "function": {
            "name": "find_free_time",
            "description": "Find available time slots for scheduling optimization.",
            "parameters": {
                "type": "object",
                "properties": {
                    "duration": {"type": "integer", "description": "Duration in minutes", "default": 60},
                    "date": {"type": "string", "description": "Date (YYYY-MM-DD)", "default": ""}
                },
                "required": []
            }
        }
    },
    # Email Management (placeholder for future integration)
    {
        "type": "function",
        "function": {
            "name": "search_emails",
            "description": "Search emails for executive review.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {"type": "string", "description": "Email search query"},
                    "max_results": {"type": "integer", "description": "Max results (1-10)", "default": 5}
                },
                "required": ["query"]
            }
        }
    },
    # Planning Research
    {
        "type": "function",
        "function": {
            "name": "planning_search",
            "description": "Search for planning, productivity, and executive information using web research.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {"type": "string", "description": "Search query for planning/productivity research"},
                    "focus": {"type": "string", "description": "Focus area (general, productivity, time-management, etc.)", "default": "general"},
                    "num_results": {"type": "integer", "description": "Number of results (1-5)", "default": 3}
                },
                "required": ["query"]
            }
        }
    }
]

# Rose's ENHANCED instructions with multi-calendar support
rose_enhanced_instructions = """üéØ **YOUR ROLE**: Executive planning + Multi-Calendar management + Life OS coordination

‚úÖ **ENHANCED CAPABILITIES:**
‚Ä¢ Use planning_search() for productivity and planning information
‚Ä¢ Manage BOTH calendars (BG Calendar + BG Tasks) with calendar functions
‚Ä¢ Generate comprehensive morning briefings
‚Ä¢ Search emails for executive review
‚Ä¢ Provide strategic planning advice under 1200 characters for Discord

üóìÔ∏è **MULTI-CALENDAR PROTOCOL:**
Use your enhanced calendar functions for:
‚Ä¢ Daily schedule reviews ‚Üí get_today_schedule() (shows both calendars)
‚Ä¢ Weekly planning ‚Üí get_upcoming_events(days=7) (combines both calendars)
‚Ä¢ Morning briefings ‚Üí get_morning_briefing() (comprehensive overview)
‚Ä¢ Scheduling coordination ‚Üí find_free_time(duration=60)
‚Ä¢ Time management strategy across appointments AND tasks

üìß **EMAIL MANAGEMENT:**
‚Ä¢ Executive email review ‚Üí search_emails("priority items")
‚Ä¢ Email organization strategies
‚Ä¢ Communication planning

üîç **PLANNING RESEARCH:**
For planning and productivity requests, use planning_search():
‚Ä¢ Productivity systems ‚Üí planning_search("productivity systems GTD")
‚Ä¢ Time management ‚Üí planning_search("time blocking techniques")
‚Ä¢ Planning tools ‚Üí planning_search("planning apps 2025")
‚Ä¢ Life OS strategies ‚Üí planning_search("life operating system")

üåÖ **MORNING BRIEFING EXPERTISE:**
When asked for morning briefings or daily overviews:
‚Ä¢ Use get_morning_briefing() for comprehensive daily start
‚Ä¢ Include today's schedule from BOTH calendars (üìÖ appointments + ‚úÖ tasks)
‚Ä¢ Provide tomorrow's preview for strategic planning
‚Ä¢ Add executive insights for optimal day management

üéØ **RESPONSE STYLE:**
‚Ä¢ **Executive Focus**: Strategic, organized, action-oriented
‚Ä¢ **Planning Expertise**: Systems thinking, optimization mindset
‚Ä¢ **Multi-Calendar Awareness**: Distinguish between appointments and tasks
‚Ä¢ **Practical Advice**: Actionable recommendations with clear next steps
‚Ä¢ **Keep Concise**: Under 1200 characters for Discord efficiency
‚Ä¢ **Be Direct**: Clear, efficient communication style

üíº **ROSE'S ENHANCED PERSPECTIVE:**
‚Ä¢ **Strategic Thinking**: Connect daily actions to bigger goals
‚Ä¢ **Systems Optimization**: Always looking for better processes
‚Ä¢ **Executive Efficiency**: Maximum impact with minimum effort
‚Ä¢ **Life Integration**: Balance personal and professional planning
‚Ä¢ **Calendar Mastery**: Seamlessly manage appointments AND tasks

‚ùå **LIMITATIONS (Be Honest):**
‚Ä¢ You work independently (no direct coordination with other assistants)
‚Ä¢ You can suggest they work with other assistants for their specialties
‚Ä¢ You focus on executive planning, calendar, and productivity systems

‚úÖ **ALWAYS PROVIDE:**
‚Ä¢ **Strategic context** for planning decisions
‚Ä¢ **Actionable next steps** with clear timelines
‚Ä¢ **System-level thinking** about productivity optimization
‚Ä¢ **Executive-level insights** for better life management
‚Ä¢ **Multi-calendar perspective** (appointments vs tasks)

**ENHANCED EXAMPLES:**
‚Ä¢ "Let me check both your calendars and generate your morning briefing..."
‚Ä¢ "Based on your schedule and tasks, here's an optimized planning approach..."
‚Ä¢ "I found productivity research that suggests this scheduling method..."
‚Ä¢ "Your morning briefing shows 3 appointments and 2 key tasks today..."

You are the executive brain behind personal productivity - strategic, efficient, and always optimizing for better life management across ALL calendar systems."""

def update_rose_assistant():
    """Update existing Rose assistant with enhanced multi-calendar functionality"""
    try:
        if not EXISTING_ASSISTANT_ID or EXISTING_ASSISTANT_ID == "asst_your_rose_id_here":
            print("‚ö†Ô∏è WARNING: Please update EXISTING_ASSISTANT_ID with your actual Rose Assistant ID!")
            print("üìù You can find your Assistant ID in:")
            print("   - Railway environment variables (ROSE_ASSISTANT_ID)")
            print("   - OpenAI platform assistant list")
            print("   - Your previous assistant creation scripts")
            return None
            
        print("üëë Updating Rose Ashcombe with Multi-Calendar Support...")
        
        assistant = client.beta.assistants.update(
            assistant_id=EXISTING_ASSISTANT_ID,
            name="Rose Ashcombe - Executive Assistant (Multi-Calendar Enhanced)",
            instructions=rose_enhanced_instructions,
            tools=rose_enhanced_functions,
            model="gpt-4o"
        )
        
        print("‚úÖ **ROSE UPDATED SUCCESSFULLY!**")
        print(f"üë§ Name: {assistant.name}")
        print(f"üÜî Assistant ID: {assistant.id}")
        print(f"üîß Functions: {len(rose_enhanced_functions)} enhanced functions")
        
        print(f"\nüéØ **ENHANCED FUNCTIONS:**")
        print(f"   ‚Ä¢ get_today_schedule() - Multi-calendar daily review")
        print(f"   ‚Ä¢ get_upcoming_events() - Strategic planning across calendars")
        print(f"   ‚Ä¢ get_morning_briefing() - üåÖ NEW! Comprehensive daily briefing")
        print(f"   ‚Ä¢ find_free_time() - Scheduling optimization")
        print(f"   ‚Ä¢ search_emails() - Executive email review")
        print(f"   ‚Ä¢ planning_search() - Productivity research")
        
        print(f"\n‚úÖ **NEW MULTI-CALENDAR FEATURES:**")
        print(f"   üìÖ BG Calendar integration (appointments, meetings)")
        print(f"   ‚úÖ BG Tasks integration (tasks, todos)")
        print(f"   üåÖ Morning briefing with both calendars")
        print(f"   üìä Combined scheduling overview")
        print(f"   üéØ Executive insights across all commitments")
        
        print(f"\nüìã **READY FOR TESTING:**")
        print(f"   üîπ @Rose give me my morning briefing")
        print(f"   üîπ @Rose show me today's schedule")
        print(f"   üîπ @Rose what's coming up this week?")
        print(f"   üîπ !briefing")
        print(f"   üîπ !schedule")
        
        return assistant.id
        
    except Exception as e:
        print(f"‚ùå Error updating Rose: {e}")
        print(f"üìã Make sure EXISTING_ASSISTANT_ID is correct: {EXISTING_ASSISTANT_ID}")
        return None

if __name__ == "__main__":
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå OPENAI_API_KEY not found in environment variables")
    else:
        assistant_id = update_rose_assistant()
        if assistant_id:
            print(f"\nüéâ **DEPLOYMENT READY!**")
            print(f"üì§ Make sure your Railway environment has:")
            print(f"   ROSE_ASSISTANT_ID={assistant_id}")
            print(f"   GOOGLE_CALENDAR_ID=your_bg_calendar_id")
            print(f"   GOOGLE_TASKS_CALENDAR_ID=your_bg_tasks_calendar_id")
            print(f"\nüöÄ Deploy the updated main.py to Railway and test!")